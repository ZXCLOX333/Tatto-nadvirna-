import bookingRouter from "./routes/booking.js";
import { sendContact } from "./routes/contact.js";
import "dotenv/config";
import { config } from "dotenv";
import path from "path";
import { fileURLToPath } from "url";
// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ .env —Ñ–∞–π–ª –∑ –ø–∞–ø–∫–∏ backend
// Load .env file from backend folder
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
config({ path: path.join(__dirname, "..", ".env") });
import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import { handleDemo } from "./routes/demo.js";
import { getReviews, addReview, clearReviews } from "./routes/reviews.js";
import telegramRouter from "./routes/telegram.js";
export function createServer() {
    const app = express();
    // Middleware
    app.use(cors({
        origin: [
            "http://localhost:8080",
            "http://localhost:8081",
            process.env.FRONTEND_URL || "https://your-frontend.netlify.app"
        ],
        credentials: true
    }));
    app.use(bodyParser.json({ limit: "10mb" }));
    app.use(bodyParser.urlencoded({ limit: "10mb", extended: true }));
    // Example API routes
    app.get("/api/ping", (_req, res) => {
        const ping = process.env.PING_MESSAGE ?? "ping";
        res.json({ message: ping });
    });
    app.get("/api/demo", handleDemo);
    // Reviews API
    app.get("/api/reviews", getReviews);
    app.post("/api/reviews", addReview);
    app.delete("/api/reviews", clearReviews);
    // Contact API endpoint
    app.post("/api/contact", sendContact);
    // Telegram API endpoint
    app.use("/api/telegram", telegramRouter);
    // Booking API endpoint
    app.use("/api/booking", bookingRouter);
    return app;
}
// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
// Start server for development
const app = createServer();
const PORT = parseInt(process.env.PORT || '5000', 10);
console.log(`üîß –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
console.log(`üîß Trying to start server on port ${PORT}`);
try {
    const server = app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`üöÄ Server running on port ${PORT}`);
        console.log(`üì± API –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${PORT}/api`);
        console.log(`üì± API available at: http://localhost:${PORT}/api`);
        console.log(`üåê –°–µ—Ä–≤–µ—Ä —Å–ª—É—Ö–∞—î –Ω–∞ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö`);
        console.log(`üåê Server listening on all interfaces`);
    });
    server.on('error', (error) => {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error}`);
        console.error(`‚ùå Server error: ${error}`);
    });
}
catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞: ${error}`);
    console.error(`‚ùå Server startup error: ${error}`);
}
